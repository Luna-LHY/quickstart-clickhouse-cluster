AWSTemplateFormatVersion: "2010-09-09"
Description: (SO8019) - This template is used for setting up a Zookeeper cluster

Parameters: 
  VPCID:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  PrivateSubnetID: 
    Description: Private Subnet Id
    Type: String
  ZookeeperServerSecurityGroupID: 
    Description: ID of the Zookeeper Server Access Security Group (e.g., sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
  KeyPairName: 
    Type: AWS::EC2::KeyPair::KeyName
    Description: Public/private key pairs allow you to securely connect to your instance after it launches
  ZookeeperNodeName1: 
    Default: ZookeeperNode1
    Type: String
  ZookeeperNodeName2:
    Default: ZookeeperNode2
    Type: String
  ZookeeperNodeName3:
    Default: ZookeeperNode3
    Type: String
  ZookeeperInstanceType: 
    Description: Amazon EC2 instance type for the Zookeeper nodes.
    Type: String
    Default: i3.2xlarge
    AllowedValues: 
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
  ZookeeperVersion:
    AllowedValues:
    - '3.5.9'
    Default: '3.5.9'
    Description: Zookeeper Version (3.5.9)
    Type: String
  ZookeeperNodeCount:
    Default: 3
    Type: Number
  CloudWatchAgentURL:
    Description: For each download link, you can download and install the CloudWatch agent using the command line
    Type: String
  RootStackName:
    Type: String
  DeviceName:
    Description: The device name (for example, /dev/sdh or xvdh)
    Type: String
    Default: /dev/xvdh
  VolumeSize: 
    Type: String
    Description: EBS Volume Size (data) to be attached to node in GBs
    Default: 500
  VolumeType: 
    Type: String
    Description: EBS Volume Type (data) to be attached to node in GBs [gp2,gp3,st1], one volume for data storage is mounted automatically by CloudFormation stack
    Default: gp2
    AllowedValues:
      - gp2
      - gp3
      - st1
      - io1
  Iops: 
    Type: String
    Description: Iops of EBS volume when io1 type is chosen. Otherwise ignored
    Default: 1000
  InstanceRoleArn:
    Description: aws or aws-cn
    Type: String
    Default: aws
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slashes (/).
    Default: quickstart-clickhouse-cluster/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slashes (/).
    Type: String
Mappings:
  AWSRegion2AMI:
    us-east-1:
      HVM64: ami-0d5eff06f840b45e9
    us-east-2:
      HVM64: ami-077e31c4939f6a2f3
      #HVM64: ami-09c84c6043ea24239
    cn-north-1:
      HVM64: ami-0c52e2685c7218558
    cn-northwest-1:
      HVM64: ami-05b9b6d6acf8ae9b6
Conditions:
  UseIops: 
    Fn::Equals: [!Ref VolumeType,"io1"]
Resources: 
  ZookeeperMainLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "ZookeeperLogGroup"
      RetentionInDays: 90
  ZookeeperInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub ec2.${AWS::URLSuffix}
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: !Sub arn:${InstanceRoleArn}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ZookeeperMainLogGroup}:*
          - Effect: Allow
            Action: '*'
            Resource: '*'
        PolicyName: Zookeeper-Instance-Role
  ZookeeperInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref ZookeeperInstanceRole
  ZookeeperInstance1: 
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install zookeeper 1
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref ZookeeperInstanceRole
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 1,
                    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
                  },
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "namespace": "ZookeeperNamespace",
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "cpu": {
                        "resources": [
                          "*"
                        ],
                        "measurement": [
                          {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                          {"name": "cpu_usage_nice", "unit": "Percent"},
                          "cpu_usage_guest"
                        ],
                        "totalcpu": true,
                        "metrics_collection_interval": 10
                      },
                      "disk": {
                        "resources": [
                          "/",
                          "/data/"
                        ],
                        "measurement": [
                          {"name": "free", "rename": "DISK_FREE", "unit": "Gigabytes"},
                          "total",
                          "used"
                        ],
                        "ignore_file_system_types": [
                          "sysfs", "devtmpfs"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "diskio": {
                        "resources": [
                          "*"
                        ],
                        "measurement": [
                          "reads",
                          "writes",
                          "read_time",
                          "write_time",
                          "io_time"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      },
                      "net": {
                        "resources": [
                          "eth0"
                        ],
                        "measurement": [
                          "bytes_sent",
                          "bytes_recv",
                          "drop_in",
                          "drop_out"
                        ]
                      }
                    }
                  },
                  "logs": {
                    "force_flush_interval": 5,
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/usr/local/apache-zookeeper-3.5.9-bin/logs/zookeeper--server-ip-*.internal.out",
                            "log_group_name": "${ZookeeperMainLogGroup}",
                            "log_stream_name": "${ZookeeperNodeName1}",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S",
                            "timezone": "UTC"
                          }
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.ZookeeperInstance1.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ZookeeperInstance1 --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
    Properties:
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref ZookeeperInstanceProfile
      ImageId: !FindInMap [AWSRegion2AMI, !Ref 'AWS::Region', HVM64]
      InstanceType: !Ref ZookeeperInstanceType
      SubnetId: !Ref PrivateSubnetID
      SecurityGroupIds:
      - !Ref ZookeeperServerSecurityGroupID
      BlockDeviceMappings:
      - DeviceName: !Ref DeviceName
        Ebs:
          VolumeSize: !Ref VolumeSize
          VolumeType: !Ref VolumeType
          Iops: !If [UseIops,!Ref Iops,!Ref AWS::NoValue]
          DeleteOnTermination: true
      UserData:
        !Base64
          Fn::Sub: |
            #!/bin/bash
            yum update -y
            # This script below is to install AmazonCloudWatchAgent, restart AmazonCloudWatchAgent and tell the result to cloudformation.
            rpm -Uvh ${CloudWatchAgentURL}
            
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ZookeeperInstance1 --region ${AWS::Region} --configsets default
            sudo mkfs.xfs ${DeviceName}
            sudo mkdir -p /data/
            sudo mount ${DeviceName} /data
            sudo mkdir -p /data/zookeeper/{data,logs}
            echo "${DeviceName}  /data  xfs  defaults  0  0" >> /etc/fstab

            cd /home/ec2-user/
            aws s3 cp s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts/zookeeper-install.sh ./ --region ${AWS::Region}
            chmod +x zookeeper-install.sh
            ./zookeeper-install.sh ${ZookeeperVersion} > zk.log

            echo "1" >> /data/zookeeper/data/myid
            aws ec2 create-tags --region ${AWS::Region} --resources `curl http://169.254.169.254/latest/meta-data/instance-id` --tags Key=${RootStackName}-zookeeper-cluster,Value="server.1=`curl http://169.254.169.254/latest/meta-data/local-ipv4`:2888:3888"

            flag=600
            while((flag > 0))
            do
              echo `aws ec2 describe-tags --filters Name=key,Values=${RootStackName}-zookeeper-cluster --region ${AWS::Region}` > instancelist
              count=`awk -v RS="@#$j" '{print gsub(/instance/,"&")}' instancelist`
              if (( $count >= ${ZookeeperNodeCount} ))
              then
                echo "found ${ZookeeperNodeCount} zk" > result
                while read line
                do
                  echo $line >> /usr/local/apache-zookeeper-${ZookeeperVersion}-bin/conf/zoo.cfg
                done < instancelist
                break
              fi
              echo $flag
              let flag--
              sleep 1
            done

            /usr/local/apache-zookeeper-${ZookeeperVersion}-bin/bin/zkServer.sh start

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ZookeeperInstance1 --region ${AWS::Region}
      Tags:
      - Key: Name
        Value: !Ref ZookeeperNodeName1
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT30M"
  ZookeeperInstance2: 
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install zookeeper 2
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref ZookeeperInstanceRole
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 1,
                    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
                  },
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "namespace": "ZookeeperNamespace",
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "cpu": {
                        "resources": [
                          "*"
                        ],
                        "measurement": [
                          {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                          {"name": "cpu_usage_nice", "unit": "Percent"},
                          "cpu_usage_guest"
                        ],
                        "totalcpu": true,
                        "metrics_collection_interval": 10
                      },
                      "disk": {
                        "resources": [
                          "/",
                          "/data/"
                        ],
                        "measurement": [
                          {"name": "free", "rename": "DISK_FREE", "unit": "Gigabytes"},
                          "total",
                          "used"
                        ],
                        "ignore_file_system_types": [
                          "sysfs", "devtmpfs"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "diskio": {
                        "resources": [
                          "*"
                        ],
                        "measurement": [
                          "reads",
                          "writes",
                          "read_time",
                          "write_time",
                          "io_time"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      },
                      "net": {
                        "resources": [
                          "eth0"
                        ],
                        "measurement": [
                          "bytes_sent",
                          "bytes_recv",
                          "drop_in",
                          "drop_out"
                        ]
                      }
                    }
                  },
                  "logs": {
                    "force_flush_interval": 5,
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/usr/local/apache-zookeeper-3.5.9-bin/logs/zookeeper--server-ip-*.internal.out",
                            "log_group_name": "${ZookeeperMainLogGroup}",
                            "log_stream_name": "${ZookeeperNodeName2}",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S",
                            "timezone": "UTC"
                          }
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.ZookeeperInstance2.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ZookeeperInstance2 --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
    Properties:
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref ZookeeperInstanceProfile
      ImageId: !FindInMap [AWSRegion2AMI, !Ref 'AWS::Region', HVM64]
      InstanceType: !Ref ZookeeperInstanceType
      SubnetId: !Ref PrivateSubnetID
      SecurityGroupIds:
      - !Ref ZookeeperServerSecurityGroupID
      BlockDeviceMappings:
      - DeviceName: !Ref DeviceName
        Ebs:
          VolumeSize: !Ref VolumeSize
          VolumeType: !Ref VolumeType
          Iops: !If [UseIops,!Ref Iops,!Ref AWS::NoValue]
          DeleteOnTermination: true
      UserData:
        !Base64
          Fn::Sub: |
            #!/bin/bash
            yum update -y
            # This script below is to install AmazonCloudWatchAgent, restart AmazonCloudWatchAgent and tell the result to cloudformation.
            rpm -Uvh ${CloudWatchAgentURL}
            
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ZookeeperInstance2 --region ${AWS::Region} --configsets default
            sudo mkfs.xfs ${DeviceName}
            sudo mkdir -p /data/
            sudo mount ${DeviceName} /data
            sudo mkdir -p /data/zookeeper/{data,logs}
            echo "${DeviceName}  /data  xfs  defaults  0  0" >> /etc/fstab

            cd /home/ec2-user/
            aws s3 cp s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts/zookeeper-install.sh ./ --region ${AWS::Region}
            chmod +x zookeeper-install.sh
            ./zookeeper-install.sh ${ZookeeperVersion} > zk.log

            echo "2" >> /data/zookeeper/data/myid
            aws ec2 create-tags --region ${AWS::Region} --resources `curl http://169.254.169.254/latest/meta-data/instance-id` --tags Key=${RootStackName}-zookeeper-cluster,Value="server.2=`curl http://169.254.169.254/latest/meta-data/local-ipv4`:2888:3888"

            flag=600
            while((flag > 0))
            do
              echo `aws ec2 describe-tags --filters Name=key,Values=${RootStackName}-zookeeper-cluster --region ${AWS::Region}` > instancelist
              count=`awk -v RS="@#$j" '{print gsub(/instance/,"&")}' instancelist`
              if (( $count >= ${ZookeeperNodeCount} ))
              then
                echo "found ${ZookeeperNodeCount} zk" > result
                while read line
                do
                  echo $line >> /usr/local/apache-zookeeper-${ZookeeperVersion}-bin/conf/zoo.cfg
                done < instancelist
                break
              fi
              echo $flag
              let flag--
              sleep 1
            done

            /usr/local/apache-zookeeper-${ZookeeperVersion}-bin/bin/zkServer.sh start

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ZookeeperInstance2 --region ${AWS::Region}
      Tags:
      - Key: Name
        Value: !Ref ZookeeperNodeName2
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT30M"
  ZookeeperInstance3: 
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install zookeeper 3
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref ZookeeperInstanceRole
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 1,
                    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
                  },
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "namespace": "ZookeeperNamespace",
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "cpu": {
                        "resources": [
                          "*"
                        ],
                        "measurement": [
                          {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                          {"name": "cpu_usage_nice", "unit": "Percent"},
                          "cpu_usage_guest"
                        ],
                        "totalcpu": true,
                        "metrics_collection_interval": 10
                      },
                      "disk": {
                        "resources": [
                          "/",
                          "/data/"
                        ],
                        "measurement": [
                          {"name": "free", "rename": "DISK_FREE", "unit": "Gigabytes"},
                          "total",
                          "used"
                        ],
                        "ignore_file_system_types": [
                          "sysfs", "devtmpfs"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "diskio": {
                        "resources": [
                          "*"
                        ],
                        "measurement": [
                          "reads",
                          "writes",
                          "read_time",
                          "write_time",
                          "io_time"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      },
                      "net": {
                        "resources": [
                          "eth0"
                        ],
                        "measurement": [
                          "bytes_sent",
                          "bytes_recv",
                          "drop_in",
                          "drop_out"
                        ]
                      }
                    }
                  },
                  "logs": {
                    "force_flush_interval": 5,
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/usr/local/apache-zookeeper-3.5.9-bin/logs/zookeeper--server-ip-*.internal.out",
                            "log_group_name": "${ZookeeperMainLogGroup}",
                            "log_stream_name": "${ZookeeperNodeName3}",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S",
                            "timezone": "UTC"
                          }
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.ZookeeperInstance3.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ZookeeperInstance3 --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
    Properties:
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref ZookeeperInstanceProfile
      ImageId: !FindInMap [AWSRegion2AMI, !Ref 'AWS::Region', HVM64]
      InstanceType: !Ref ZookeeperInstanceType
      SubnetId: !Ref PrivateSubnetID
      SecurityGroupIds:
      - !Ref ZookeeperServerSecurityGroupID
      BlockDeviceMappings:
      - DeviceName: !Ref DeviceName
        Ebs:
          VolumeSize: !Ref VolumeSize
          VolumeType: !Ref VolumeType
          Iops: !If [UseIops,!Ref Iops,!Ref AWS::NoValue]
          DeleteOnTermination: true
      UserData:
        !Base64
          Fn::Sub: |
            #!/bin/bash
            yum update -y

            # This script below is to install AmazonCloudWatchAgent, restart AmazonCloudWatchAgent and tell the result to cloudformation.
            rpm -Uvh ${CloudWatchAgentURL}

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ZookeeperInstance3 --region ${AWS::Region} --configsets default
            sudo mkfs.xfs ${DeviceName}
            sudo mkdir -p /data/
            sudo mount ${DeviceName} /data
            sudo mkdir -p /data/zookeeper/{data,logs}
            echo "${DeviceName}  /data  xfs  defaults  0  0" >> /etc/fstab

            cd /home/ec2-user/
            aws s3 cp s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts/zookeeper-install.sh ./ --region ${AWS::Region}
            chmod +x zookeeper-install.sh
            ./zookeeper-install.sh ${ZookeeperVersion} > zk.log

            echo "3" >> /data/zookeeper/data/myid

            aws ec2 create-tags --region ${AWS::Region} --resources `curl http://169.254.169.254/latest/meta-data/instance-id` --tags Key=${RootStackName}-zookeeper-cluster,Value="server.3=`curl http://169.254.169.254/latest/meta-data/local-ipv4`:2888:3888"

            flag=600
            while((flag > 0))
            do
              echo `aws ec2 describe-tags --filters Name=key,Values=${RootStackName}-zookeeper-cluster --region ${AWS::Region}` > instancelist
              count=`awk -v RS="@#$j" '{print gsub(/instance/,"&")}' instancelist`
              if (( $count >= ${ZookeeperNodeCount} ))
              then
                echo "found ${ZookeeperNodeCount} zk" > result
                while read line
                do
                  echo $line >> /usr/local/apache-zookeeper-${ZookeeperVersion}-bin/conf/zoo.cfg
                done < instancelist
                break
              fi
              echo $flag
              let flag--
              sleep 1
            done

            /usr/local/apache-zookeeper-${ZookeeperVersion}-bin/bin/zkServer.sh start

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ZookeeperInstance3 --region ${AWS::Region}
      Tags:
      - Key: Name
        Value: !Ref ZookeeperNodeName3
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT30M"
Outputs:
  ZookeeperInstanceID1:
    Description: Zookeeper instance
    Value: !Ref ZookeeperInstance1
  ZookeeperPrivateIp1:
    Value: !GetAtt ZookeeperInstance1.PrivateIp
  ZookeeperInstanceID2:
    Description: Zookeeper instance
    Value: !Ref ZookeeperInstance2
  ZookeeperPrivateIp2:
    Value: !GetAtt ZookeeperInstance2.PrivateIp
  ZookeeperInstanceID3:
    Description: Zookeeper instance
    Value: !Ref ZookeeperInstance3
  ZookeeperPrivateIp3:
    Value: !GetAtt ZookeeperInstance3.PrivateIp
  ZookeeperMainLogGroup:
    Value: !Ref ZookeeperMainLogGroup
  ImageId:
    Value: !FindInMap [AWSRegion2AMI, !Ref 'AWS::Region', HVM64]
